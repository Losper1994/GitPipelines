# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build
      run: |
        # Assuming you have a build script or command
        python setup.py build
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: dist/

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        pytest --maxfail=1 --disable-warnings -q

    - name: Code coverage
      run: |
        # Assuming you use coverage.py
        coverage run -m pytest
        coverage report
        coverage html
      continue-on-error: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage-report/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        # Add your deployment script or command here
        echo "Deploying to staging environment..."
        # Example: scp -r ./dist user@staging-server:/path/to/deploy

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: failure() # This ensures the notification step runs only on failure

    steps:
    - name: Send notification
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD Pipeline failed!"}' $SLACK_WEBHOOK_URL

